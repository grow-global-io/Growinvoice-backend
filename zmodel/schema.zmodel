import "base"

generator client {
    provider = "prisma-client-js"
}

plugin prisma {
    provider = '@core/prisma'
    format = true
    output = "../prisma/schema.prisma"
}

generator nestjsDto {
    provider                        = "prisma-generator-nestjs-dto"
    output                          = "../shared/models"
    outputToNestJsResourceStructure = "false"
    flatResourceStructure           = "false"
    exportRelationModifierClasses   = "true"
    reExport                        = "true"
    createDtoPrefix                 = "Create"
    updateDtoPrefix                 = "Update"
    dtoSuffix                       = "Dto"
    entityPrefix                    = ""
    entitySuffix                    = ""
    classValidation                 = "true"
    fileNamingStyle                 = "camel"
    noDependencies                  = "false"
    outputType                      = "class"
    definiteAssignmentAssertion     = "false"
    requiredResponseApiProperty     = "true"
    prettier                        = "true"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ProductType {
    Service
    Good
}

enum CustomerOption {
    Freelancer
    BusinessWithGST
    BusinessWithoutGST
}

enum InvoiceRecurring {
    Daily
    Weekly
    Monthly
    Quarterly
    HalfYearly
    Yearly
}

enum PaymentType {
    UPI
    EuropeanBank
    IndianBank
    SwiftCode
    Paypal
    Stripe
    Razorpay
    Mollie
    Cash
    Cheque
}

enum paidStatus {
    Paid
    Unpaid
}

enum GateWayType {
    Stripe
    Razorpay
}

enum PlanFeature {

    Invoice
    Quotation
    Customer
    Product
    Tax
    HSNCode
    ProductUnit
    PaymentDetails
    InvoiceSettings
    QuotationSettings
    Payments
    GateWayDetails
    AIDashboard
}

model Country extends Base {
    id                    String                  @id @default(cuid())
    name                  String
    code                  String
    phone_code            String
    state                 State[]                 @DtoApiHidden
    BillingAddress        BillingAddress[]        @DtoApiHidden
    ShippingAddress       ShippingAddress[]       @DtoApiHidden
    Company               Company[]               @DtoApiHidden
    VendorsBillingAddress VendorsBillingAddress[] @DtoApiHidden
}

model State extends Base {
    id                    String                  @id @default(cuid())
    name                  String
    country_id            String                  @DtoRelationIncludeId
    country               Country                 @relation(fields: [country_id], references: [id], onDelete: Cascade)
    BillingAddress        BillingAddress[]        @DtoApiHidden
    ShippingAddress       ShippingAddress[]       @DtoApiHidden
    Company               Company[]               @DtoApiHidden
    VendorsBillingAddress VendorsBillingAddress[] @DtoApiHidden
}

model User extends Base {
    id                String              @id @default(cuid())
    email             String              @unique
    name              String?
    phone             String?
    password          String
    resetToken        String?             @DtoCreateHidden @DtoUpdateHidden
    resetTokenExpiry  DateTime?           @DtoCreateHidden @DtoUpdateHidden
    currency_id       String?             @DtoRelationIncludeId
    currency          Currencies?         @relation(fields: [currency_id], references: [id], onDelete: SetNull)
    company           Company[]           @DtoApiHidden
    product           Product[]           @DtoApiHidden
    hsnCode           HSNCode[]           @DtoApiHidden
    tax               Tax[]               @DtoApiHidden
    productUnit       ProductUnit[]       @DtoApiHidden
    customer          Customer[]          @DtoApiHidden
    invoice           Invoice[]           @DtoApiHidden
    paymentDetails    PaymentDetails[]    @DtoApiHidden
    quotation         Quotation[]         @DtoApiHidden
    InvoiceSettings   InvoiceSettings[]   @DtoApiHidden
    OpenAiHistory     OpenAiHistory[]     @DtoApiHidden
    QuotationSettings QuotationSettings[] @DtoApiHidden
    Payments          Payments[]          @DtoApiHidden
    GateWayDetails    GateWayDetails[]    @DtoApiHidden
    AIDashboard       AIDashboard[]       @DtoApiHidden
    Notification      Notification[]      @DtoApiHidden
    UserPlans         UserPlans[]         @DtoApiHidden
    Vendors           Vendors[]           @DtoApiHidden
    Expenses          Expenses[]          @DtoApiHidden
}

model Company extends Base {
    id         String   @id @default(cuid())
    name       String
    address    String?
    phone      String?
    country_id String?  @DtoRelationIncludeId
    country    Country? @relation(fields: [country_id], references: [id])
    state_id   String?  @DtoRelationIncludeId
    state      State?   @relation(fields: [state_id], references: [id])
    city       String?
    zip        String?
    vat        String?
    logo       String?
    user_id    String   @unique @DtoRelationIncludeId
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model HSNCode extends Base {
    id                String              @id @default(cuid())
    code              String
    tax_id            String              @DtoRelationIncludeId
    tax               Tax                 @relation(fields: [tax_id], references: [id], onDelete: Cascade)
    user_id           String              @DtoRelationIncludeId
    user              User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product           Product[]           @DtoApiHidden
    InvoiceProducts   InvoiceProducts[]   @DtoApiHidden
    QuotationProducts QuotationProducts[] @DtoApiHidden
}

model Tax extends Base {
    id                String              @id @default(cuid())
    percentage        Float
    description       String?
    user_id           String              @DtoRelationIncludeId
    user              User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product           Product[]           @DtoApiHidden
    Invoice           Invoice[]           @DtoApiHidden
    Quatation         Quotation[]         @DtoApiHidden
    hsnCode           HSNCode[]           @DtoApiHidden
    InvoiceProducts   InvoiceProducts[]   @DtoApiHidden
    QuotationProducts QuotationProducts[] @DtoApiHidden
}

model ProductUnit extends Base {
    id      String    @id @default(cuid())
    name    String
    user_id String    @DtoRelationIncludeId
    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product Product[] @DtoApiHidden
}

model Product extends Base {
    id          String              @id @default(cuid())
    name        String
    description String?
    price       Float
    type        ProductType
    currency_id String              @DtoRelationIncludeId
    currency    Currencies          @relation(fields: [currency_id], references: [id], onDelete: Cascade)
    unit_id     String              @DtoRelationIncludeId
    unit        ProductUnit         @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    hsnCode_id  String?             @DtoRelationIncludeId @DtoCreateOptional @DtoUpdateOptional
    hsnCode     HSNCode?            @relation(fields: [hsnCode_id], references: [id], onDelete: Cascade)
    tax_id      String?             @DtoRelationIncludeId @DtoCreateOptional @DtoUpdateOptional
    tax         Tax?                @relation(fields: [tax_id], references: [id], onDelete: Cascade)
    user_id     String              @DtoRelationIncludeId
    user        User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
    invoice     InvoiceProducts[]   @DtoApiHidden
    Quatation   QuotationProducts[] @DtoApiHidden
}



model BillingAddress extends Base {
    id         String     @id @default(cuid())
    address    String
    city       String
    state_id   String     @DtoRelationIncludeId
    state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
    country_id String     @DtoRelationIncludeId
    country    Country    @relation(fields: [country_id], references: [id], onDelete: Cascade)
    zip        String
    customer   Customer[] @DtoApiHidden
}

model ShippingAddress extends Base {
    id         String     @id @default(cuid())
    address    String
    city       String
    state_id   String     @DtoRelationIncludeId
    state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
    country_id String     @DtoRelationIncludeId
    country    Country    @relation(fields: [country_id], references: [id], onDelete: Cascade)
    zip        String
    customer   Customer[] @DtoApiHidden
}

model Currencies extends Base {
    id         String     @id @default(cuid())
    name       String
    symbol     String
    code       String
    short_code String
    currency   Customer[] @DtoApiHidden
    user       User[]     @DtoApiHidden
    product    Product[]  @DtoApiHidden
    expense    Expenses[] @DtoApiHidden
}



model Customer extends Base {
    id                 String          @id @default(cuid())
    name               String
    display_name       String
    email              String
    phone              String?
    website            String?
    option             CustomerOption
    currencies_id      String          @DtoRelationIncludeId
    currencies         Currencies      @relation(fields: [currencies_id], references: [id])
    billingAddress_id  String          @DtoRelationIncludeId
    billingAddress     BillingAddress  @relation(fields: [billingAddress_id], references: [id], onDelete: Cascade)
    shippingAddress_id String          @DtoRelationIncludeId
    shippingAddress    ShippingAddress @relation(fields: [shippingAddress_id], references: [id], onDelete: Cascade)
    user_id            String          @DtoRelationIncludeId
    user               User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
    invoice            Invoice[]       @DtoApiHidden
    Quatation          Quotation[]     @DtoApiHidden
}

model PaymentDetails extends Base {
    id          String      @id @default(cuid())
    paymentType PaymentType
    ibanNumber  String?     @DtoCreateOptional @DtoUpdateOptional
    bicNumber   String?     @DtoCreateOptional @DtoUpdateOptional
    upiId       String?     @DtoCreateOptional @DtoUpdateOptional
    ifscCode    String?     @DtoCreateOptional @DtoUpdateOptional
    account_no  String?     @DtoCreateOptional @DtoUpdateOptional
    swiftCode   String?     @DtoCreateOptional @DtoUpdateOptional
    paypalId    String?     @DtoCreateOptional @DtoUpdateOptional
    stripeId    String?     @DtoCreateOptional @DtoUpdateOptional
    razorpayId  String?     @DtoCreateOptional @DtoUpdateOptional
    mollieId    String?     @DtoCreateOptional @DtoUpdateOptional
    user_id     String      @DtoRelationIncludeId
    user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    invoice     Invoice[]   @DtoApiHidden
    Payments    Payments[]  @DtoApiHidden
}

model GateWayDetails extends Base {
    id      String      @id @default(cuid())
    type    GateWayType
    key     String?     @DtoCreateOptional @DtoUpdateOptional
    secret  String?     @DtoCreateOptional @DtoUpdateOptional
    user_id String      @DtoRelationIncludeId
    user    User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    enabled Boolean     @default(false) @DtoCreateOptional @DtoUpdateOptional

    @@unique([type, user_id])
}

model InvoiceProducts extends Base {
    id         String   @id @default(cuid())
    invoice_id String   @DtoRelationIncludeId
    invoice    Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
    product_id String   @DtoRelationIncludeId
    product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
    quantity   Float
    tax_id     String?  @DtoRelationIncludeId
    tax        Tax?     @relation(fields: [tax_id], references: [id], onDelete: SetNull)
    hsnCode_id String?  @DtoRelationIncludeId
    hsnCode    HSNCode? @relation(fields: [hsnCode_id], references: [id], onDelete: SetNull)
    price      Float
    total      Float
}

model Invoice extends Base {
    id                 String            @id @default(cuid())
    customer_id        String            @DtoRelationIncludeId
    customer           Customer          @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    user_id            String            @DtoRelationIncludeId
    user               User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
    invoice_number     String
    reference_number   String?           @DtoCreateOptional @DtoUpdateOptional
    date               DateTime
    due_date           DateTime
    is_recurring       Boolean
    recurring          InvoiceRecurring? @DtoCreateOptional @DtoUpdateOptional
    paymentId          String?           @DtoRelationIncludeId
    payment            PaymentDetails?   @relation(fields: [paymentId], references: [id], onDelete: SetNull)
    product            InvoiceProducts[] @DtoApiHidden
    notes              String?           @DtoCreateOptional @DtoUpdateOptional
    sub_total          Float
    tax_id             String?           @DtoRelationIncludeId
    tax                Tax?              @relation(fields: [tax_id], references: [id], onDelete: SetNull)
    discountPercentage Float?            @DtoCreateOptional @DtoUpdateOptional
    due_amount         Float
    paid_amount        Float
    total              Float
    paid_status        paidStatus        @default(Unpaid)
    status             String?           @DtoCreateOptional @DtoUpdateOptional @default("Draft")
    template_id        String?           @DtoRelationIncludeId
    template           invoiceTemplate?  @relation(fields: [template_id], references: [id], onDelete: SetNull)
    Payments           Payments[]        @DtoApiHidden
    template_url       String?           @DtoCreateOptional @DtoUpdateOptional
}


model invoiceTemplate extends Base {
    id              String            @id @default(cuid())
    name            String
    view            String
    path            String?           @DtoCreateOptional @DtoUpdateOptional
    invoice         Invoice[]         @DtoApiHidden
    InvoiceSettings InvoiceSettings[] @DtoApiHidden
}

model InvoiceSettings extends Base {
    id                              String          @id @default(cuid())
    user_id                         String          @DtoRelationIncludeId
    user                            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
    invoiceTemplateId               String          @DtoRelationIncludeId
    invoiceTemplate                 invoiceTemplate @relation(fields: [invoiceTemplateId], references: [id], onDelete: Cascade)
    invoicePrefix                   String
    autoArchive                     Boolean         @default(false) @DtoCreateOptional @DtoUpdateOptional
    footer                          String?         @DtoCreateOptional @DtoUpdateOptional
    notes                           String?         @DtoCreateOptional @DtoUpdateOptional
    dueNotice                       Int
    overDueNotice                   Int
    companyAddressTemplate          String
    customerBillingAddressTemplate  String
    customerShippingAddressTemplate String

    @@unique([user_id, id])
}

model QuotationProducts extends Base {
    id           String    @id @default(cuid())
    quotation_id String    @DtoRelationIncludeId
    quotation    Quotation @relation(fields: [quotation_id], references: [id], onDelete: Cascade)
    product_id   String    @DtoRelationIncludeId
    product      Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
    quantity     Float
    tax_id       String?   @DtoRelationIncludeId
    tax          Tax?      @relation(fields: [tax_id], references: [id], onDelete: SetNull)
    hsnCode_id   String?   @DtoRelationIncludeId
    hsnCode      HSNCode?  @relation(fields: [hsnCode_id], references: [id], onDelete: SetNull)
    price        Float
    total        Float
}

model Quotation extends Base {
    id                 String              @id @default(cuid())
    customer_id        String              @DtoRelationIncludeId
    customer           Customer            @relation(fields: [customer_id], references: [id], onDelete: Cascade)
    user_id            String              @DtoRelationIncludeId
    user               User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
    quatation_number   String
    reference_number   String?             @DtoCreateOptional @DtoUpdateOptional
    date               DateTime
    expiry_at          DateTime
    product            QuotationProducts[] @DtoApiHidden
    notes              String?             @DtoCreateOptional @DtoUpdateOptional
    private_notes      String?             @DtoCreateOptional @DtoUpdateOptional
    sub_total          Float
    tax_id             String?             @DtoRelationIncludeId
    tax                Tax?                @relation(fields: [tax_id], references: [id], onDelete: SetNull)
    discountPercentage Float?              @DtoCreateOptional @DtoUpdateOptional
    total              Float
    template_id        String?             @DtoRelationIncludeId
    template           QuotationTemplate?  @relation(fields: [template_id], references: [id], onDelete: SetNull)
    status             String?             @DtoCreateOptional @DtoUpdateOptional @default("Draft")
    template_url       String?             @DtoCreateOptional @DtoUpdateOptional
}

model QuotationTemplate extends Base {
    id                String              @id @default(cuid())
    name              String
    view              String
    path              String?             @DtoCreateOptional @DtoUpdateOptional
    quotation         Quotation[]         @DtoApiHidden
    quotationSettings QuotationSettings[] @DtoApiHidden
}

model QuotationSettings extends Base {
    id                              String            @id @default(cuid())
    user_id                         String            @DtoRelationIncludeId
    user                            User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
    quotationTemplateId             String            @DtoRelationIncludeId
    quotationTemplate               QuotationTemplate @relation(fields: [quotationTemplateId], references: [id], onDelete: Cascade)
    quotationPrefix                 String
    autoArchive                     Boolean           @default(false) @DtoCreateOptional @DtoUpdateOptional
    autoConvert                     Boolean           @default(false) @DtoCreateOptional @DtoUpdateOptional
    footer                          String?           @DtoCreateOptional @DtoUpdateOptional
    notes                           String?           @DtoCreateOptional @DtoUpdateOptional
    companyAddressTemplate          String
    customerBillingAddressTemplate  String
    customerShippingAddressTemplate String
    dueNotice                       Int
    overDueNotice                   Int

    @@unique([user_id, id])
}

model OpenAiHistory extends Base {
    id      String @id @default(cuid())
    user_id String @DtoRelationIncludeId
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    query   String
    result  String

    @@unique([user_id, query])
}

model Payments extends Base {
    id                String         @id @default(cuid())
    paymentDate       DateTime       @default(now()) @DtoCreateOptional @DtoUpdateOptional
    reference_number  String?        @DtoCreateOptional @DtoUpdateOptional
    amount            Float
    paymentDetails_id String         @DtoRelationIncludeId
    paymentDetails    PaymentDetails @relation(fields: [paymentDetails_id], references: [id], onDelete: Cascade)
    notes             String?        @DtoCreateOptional @DtoUpdateOptional
    private_notes     String?        @DtoCreateOptional @DtoUpdateOptional
    user_id           String         @DtoRelationIncludeId
    user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
    payment_type      PaymentType    @default(Cash) @DtoCreateOptional @DtoUpdateOptional
    invoice_id        String         @DtoRelationIncludeId
    invoice           Invoice        @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
}

enum DashboardTypes {
    Table
    Chart
}

model AIDashboard extends Base {
    id      String         @id @default(cuid())
    user_id String         @DtoRelationIncludeId
    user    User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
    title   String
    query   String
    prompt  String
    type    DashboardTypes
}

model Notification extends Base {
    id       String  @id @default(cuid())
    user_id  String  @DtoRelationIncludeId
    user     User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
    title    String
    body     String
    read     Boolean @default(false)
    meta     String? @DtoCreateOptional @DtoUpdateOptional
    metaType String? @DtoCreateOptional @DtoUpdateOptional
}

model Plans extends Base {
    id           String         @id @default(cuid())
    name         String
    description  String
    is_active    Boolean
    price        Float
    days         Int
    PlanFeatures PlanFeatures[] @DtoApiHidden
    UserPlans    UserPlans[]    @DtoApiHidden
}

model PlanFeatures extends Base {
    id      String      @id @default(cuid())
    plan_id String      @DtoRelationIncludeId
    plan    Plans       @relation(fields: [plan_id], references: [id], onDelete: Cascade)
    feature PlanFeature
    count   Int
}

model UserPlans extends Base {
    id         String   @id @default(cuid())
    user_id    String   @DtoRelationIncludeId
    user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    plan_id    String   @DtoRelationIncludeId
    plan       Plans    @relation(fields: [plan_id], references: [id], onDelete: Cascade)
    session_id String   @DtoCreateOptional @DtoUpdateOptional
    start_date DateTime
    end_date   DateTime
    status     Boolean  @default(false) @DtoCreateOptional @DtoUpdateOptional
}

model Vendors extends Base {
    id                String                @id @default(cuid())
    name              String
    display_name      String
    email             String
    phone             String?
    website           String?
    billingAddress_id String                @DtoRelationIncludeId
    billingAddress    VendorsBillingAddress @relation(fields: [billingAddress_id], references: [id], onDelete: Cascade)
    user_id           String                @DtoRelationIncludeId
    user              User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
    expenses          Expenses[]            @DtoApiHidden
}

model VendorsBillingAddress extends Base {
    id         String    @id @default(cuid())
    address    String
    city       String
    state_id   String    @DtoRelationIncludeId
    state      State     @relation(fields: [state_id], references: [id], onDelete: Cascade)
    country_id String    @DtoRelationIncludeId
    country    Country   @relation(fields: [country_id], references: [id], onDelete: Cascade)
    zip        String
    vendor     Vendors[] @DtoApiHidden
}

enum ExpenseCategory {
    Travel
    Food
    Office
    Rent
    Salary
    Other
}

model Expenses extends Base {
    id          String          @id @default(cuid())
    receipt_url String?         @DtoCreateOptional @DtoUpdateOptional
    category    ExpenseCategory
    vendor_id   String          @DtoRelationIncludeId
    vendor      Vendors         @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
    user_id     String          @DtoRelationIncludeId
    user        User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
    expenseDate DateTime
    amount      Float
    currency_id String          @DtoRelationIncludeId
    currency    Currencies      @relation(fields: [currency_id], references: [id], onDelete: Cascade)
    notes       String?         @DtoCreateOptional @DtoUpdateOptional
}