import "base"

generator client {
    provider = "prisma-client-js"
}

plugin prisma {
    provider = '@core/prisma'
    format = true
    output = "../prisma/schema.prisma"
}

generator nestjsDto {
    provider                        = "prisma-generator-nestjs-dto"
    output                          = "../shared/models"
    outputToNestJsResourceStructure = "false"
    flatResourceStructure           = "false"
    exportRelationModifierClasses   = "true"
    reExport                        = "true"
    createDtoPrefix                 = "Create"
    updateDtoPrefix                 = "Update"
    dtoSuffix                       = "Dto"
    entityPrefix                    = ""
    entitySuffix                    = ""
    classValidation                 = "true"
    fileNamingStyle                 = "camel"
    noDependencies                  = "false"
    outputType                      = "class"
    definiteAssignmentAssertion     = "false"
    requiredResponseApiProperty     = "true"
    prettier                        = "true"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ProductType {
    Service
    Good
}

enum CustomerOption {
    Freelancer
    BusinessWithGST
    BusinessWithoutGST
}

model User extends Base {
    id               String        @id @default(cuid())
    email            String        @unique
    name             String?
    phone            String?
    password         String
    resetToken       String?       @DtoCreateHidden @DtoUpdateHidden
    resetTokenExpiry DateTime?     @DtoCreateHidden @DtoUpdateHidden
    currency_id      String?       @DtoRelationIncludeId @DtoCreateHidden @DtoUpdateHidden
    currency         Currencies?   @relation(fields: [currency_id], references: [id], onDelete: SetNull)
    company          Company[]     @DtoApiHidden
    product          Product[]     @DtoApiHidden
    hsnCode          HSNCode[]     @DtoApiHidden
    tax              Tax[]         @DtoApiHidden
    productUnit      ProductUnit[] @DtoApiHidden
    customer         Customer[]    @DtoApiHidden
}

model Company extends Base {
    id      String  @id @default(cuid())
    name    String
    address String?
    phone   String?
    country String?
    state   String?
    city    String?
    zip     String?
    vat     String?
    logo    String?
    user_id String  @unique @DtoRelationIncludeId
    user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model HSNCode extends Base {
    id      String    @id @default(cuid())
    code    String
    tax     Float
    user_id String    @DtoRelationIncludeId
    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product Product[] @DtoApiHidden
}

model Tax extends Base {
    id          String    @id @default(cuid())
    percentage  Float
    description String?
    user_id     String    @DtoRelationIncludeId
    user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product     Product[] @DtoApiHidden
}

model ProductUnit extends Base {
    id      String    @id @default(cuid())
    name    String
    user_id String    @DtoRelationIncludeId
    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product Product[] @DtoApiHidden
}

model Product extends Base {
    id          String      @id @default(cuid())
    name        String
    description String?
    price       Float
    type        ProductType
    currency_id String      @DtoRelationIncludeId
    currency    Currencies  @relation(fields: [currency_id], references: [id], onDelete: Cascade)
    unit_id     String      @DtoRelationIncludeId
    unit        ProductUnit @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    hsnCode_id  String      @DtoRelationIncludeId
    hsnCode     HSNCode     @relation(fields: [hsnCode_id], references: [id], onDelete: Cascade)
    tax_id      String      @DtoRelationIncludeId
    tax         Tax         @relation(fields: [tax_id], references: [id], onDelete: Cascade)
    user_id     String      @DtoRelationIncludeId
    user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}



model BillingAddress extends Base {
    id         String     @id @default(cuid())
    address    String
    city       String
    state_id   String     @DtoRelationIncludeId
    state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
    country_id String     @DtoRelationIncludeId
    country    Country    @relation(fields: [country_id], references: [id], onDelete: Cascade)
    zip        String
    customer   Customer[] @DtoApiHidden
}

model ShippingAddress extends Base {
    id         String     @id @default(cuid())
    address    String
    city       String
    state_id   String     @DtoRelationIncludeId
    state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
    country_id String     @DtoRelationIncludeId
    country    Country    @relation(fields: [country_id], references: [id], onDelete: Cascade)
    zip        String
    customer   Customer[] @DtoApiHidden
}

model Currencies extends Base {
    id         String     @id @default(cuid())
    name       String
    symbol     String
    code       String
    short_code String
    currency   Customer[] @DtoApiHidden
    user       User[]     @DtoApiHidden
    product    Product[]  @DtoApiHidden
}

model Country extends Base {
    id              String            @id @default(cuid())
    name            String
    code            String
    phone_code      String
    state           State[]           @DtoApiHidden
    BillingAddress  BillingAddress[]  @DtoApiHidden
    ShippingAddress ShippingAddress[] @DtoApiHidden
}

model State extends Base {
    id              String            @id @default(cuid())
    name            String
    country_id      String            @DtoRelationIncludeId
    country         Country           @relation(fields: [country_id], references: [id], onDelete: Cascade)
    BillingAddress  BillingAddress[]  @DtoApiHidden
    ShippingAddress ShippingAddress[] @DtoApiHidden
}

model Customer extends Base {
    id                 String          @id @default(cuid())
    name               String
    display_name       String?
    email              String?
    phone              String?
    website            String?
    option             CustomerOption
    currencies_id      String          @DtoRelationIncludeId
    currencies         Currencies      @relation(fields: [currencies_id], references: [id])
    billingAddress_id  String          @DtoRelationIncludeId
    billingAddress     BillingAddress  @relation(fields: [billingAddress_id], references: [id], onDelete: Cascade)
    shippingAddress_id String          @DtoRelationIncludeId
    shippingAddress    ShippingAddress @relation(fields: [shippingAddress_id], references: [id], onDelete: Cascade)
    user_id            String          @DtoRelationIncludeId
    user               User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Post extends Base {
    id      String @id @default(cuid())
    title   String
    content String
}