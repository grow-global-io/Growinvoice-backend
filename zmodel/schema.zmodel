import "base"

generator client {
    provider = "prisma-client-js"
}

plugin prisma {
    provider = '@core/prisma'
    format = true
    output = "../prisma/schema.prisma"
}

generator nestjsDto {
    provider                        = "prisma-generator-nestjs-dto"
    output                          = "../shared/models"
    outputToNestJsResourceStructure = "false"
    flatResourceStructure           = "false"
    exportRelationModifierClasses   = "true"
    reExport                        = "true"
    createDtoPrefix                 = "Create"
    updateDtoPrefix                 = "Update"
    dtoSuffix                       = "Dto"
    entityPrefix                    = ""
    entitySuffix                    = ""
    classValidation                 = "true"
    fileNamingStyle                 = "camel"
    noDependencies                  = "false"
    outputType                      = "class"
    definiteAssignmentAssertion     = "false"
    requiredResponseApiProperty     = "true"
    prettier                        = "true"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ProductType {
    Service
    Good
}

model User extends Base {
    id               String        @id @default(cuid())
    email            String        @unique
    name             String?
    phone            String?
    password         String
    resetToken       String?       @DtoCreateHidden @DtoUpdateHidden
    resetTokenExpiry DateTime?     @DtoCreateHidden @DtoUpdateHidden
    company          Company[]     @DtoApiHidden
    product          Product[]     @DtoApiHidden
    hsnCode          HSNCode[]     @DtoApiHidden
    tax              Tax[]         @DtoApiHidden
    productUnit      ProductUnit[] @DtoApiHidden
    customer         Customer[]    @DtoApiHidden
}

model Company extends Base {
    id      String  @id @default(cuid())
    name    String
    address String?
    phone   String?
    country String?
    state   String?
    city    String?
    zip     String?
    vat     String?
    user_id String  @unique @DtoRelationIncludeId
    user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model HSNCode extends Base {
    id      String    @id @default(cuid())
    code    String
    tax     Float
    user_id String    @DtoRelationIncludeId
    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product Product[] @DtoApiHidden
}

model Tax extends Base {
    id      String    @id @default(cuid())
    name    String
    rate    Float
    user_id String    @DtoRelationIncludeId
    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product Product[] @DtoApiHidden
}

model ProductUnit extends Base {
    id      String    @id @default(cuid())
    name    String
    symbol  String
    user_id String    @DtoRelationIncludeId
    user    User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    Product Product[] @DtoApiHidden
}

model Product extends Base {
    id          String      @id @default(cuid())
    name        String
    description String?
    price       Float
    type        ProductType
    unit_id     String      @DtoRelationIncludeId
    unit        ProductUnit @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    hsnCode_id  String      @DtoRelationIncludeId
    hsnCode     HSNCode     @relation(fields: [hsnCode_id], references: [id], onDelete: Cascade)
    tax_id      String      @DtoRelationIncludeId
    tax         Tax         @relation(fields: [tax_id], references: [id], onDelete: Cascade)
    user_id     String      @DtoRelationIncludeId
    user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Customer extends Base {
    id      String  @id @default(cuid())
    name    String
    email   String?
    phone   String?
    address String?
    country String?
    state   String?
    city    String?
    zip     String?
    user_id String  @DtoRelationIncludeId
    user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Currencies extends Base {
    id         String @id @default(cuid())
    name       String
    symbol     String
    code       String
    short_code String
}