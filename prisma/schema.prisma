//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../shared/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

enum ProductType {
  Service
  Good
}

/// @@deny('read', isExist == false)
model User {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt        DateTime      @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt        DateTime?     @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist          Boolean       @default(true)
  id               String        @id() @default(cuid())
  email            String        @unique()
  name             String?
  phone            String?
  password         String
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  resetToken       String?
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  resetTokenExpiry DateTime?
  /// @DtoApiHidden
  company          Company[]
  /// @DtoApiHidden
  product          Product[]
  /// @DtoApiHidden
  hsnCode          HSNCode[]
  /// @DtoApiHidden
  tax              Tax[]
  /// @DtoApiHidden
  productUnit      ProductUnit[]
  /// @DtoApiHidden
  customer         Customer[]
}

/// @@deny('read', isExist == false)
model Company {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist   Boolean   @default(true)
  id        String    @id() @default(cuid())
  name      String
  address   String?
  phone     String?
  country   String?
  state     String?
  city      String?
  zip       String?
  vat       String?
  /// @DtoRelationIncludeId
  user_id   String    @unique()
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// @@deny('read', isExist == false)
model HSNCode {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist   Boolean   @default(true)
  id        String    @id() @default(cuid())
  code      String
  tax       Float
  /// @DtoRelationIncludeId
  user_id   String
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  Product   Product[]
}

/// @@deny('read', isExist == false)
model Tax {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist   Boolean   @default(true)
  id        String    @id() @default(cuid())
  name      String
  rate      Float
  /// @DtoRelationIncludeId
  user_id   String
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  Product   Product[]
}

/// @@deny('read', isExist == false)
model ProductUnit {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist   Boolean   @default(true)
  id        String    @id() @default(cuid())
  name      String
  symbol    String
  /// @DtoRelationIncludeId
  user_id   String
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  Product   Product[]
}

/// @@deny('read', isExist == false)
model Product {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt   DateTime    @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt   DateTime?   @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist     Boolean     @default(true)
  id          String      @id() @default(cuid())
  name        String
  description String?
  price       Float
  type        ProductType
  /// @DtoRelationIncludeId
  unit_id     String
  unit        ProductUnit @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  hsnCode_id  String
  hsnCode     HSNCode     @relation(fields: [hsnCode_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  tax_id      String
  tax         Tax         @relation(fields: [tax_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  user_id     String
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// @@deny('read', isExist == false)
model Customer {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist   Boolean   @default(true)
  id        String    @id() @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  country   String?
  state     String?
  city      String?
  zip       String?
  /// @DtoRelationIncludeId
  user_id   String
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// @@deny('read', isExist == false)
model Currencies {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt  DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt  DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist    Boolean   @default(true)
  id         String    @id() @default(cuid())
  name       String
  symbol     String
  code       String
  short_code String
}
