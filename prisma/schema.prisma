//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../shared/models"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "true"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

enum ProductType {
  Service
  Good
}

enum CustomerOption {
  Freelancer
  BusinessWithGST
  BusinessWithoutGST
}

enum InvoiceRecurring {
  Daily
  Weekly
  Monthly
  Quarterly
  HalfYearly
  Yearly
}

enum PaymentType {
  UPI
  EuropeanBank
  IndianBank
  SwiftCode
  Paypal
  Stripe
  Razorpay
  Mollie
  Cash
  Cheque
}

enum paidStatus {
  Paid
  Unpaid
}

/// @@deny('read', isExist == false)
model Country {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt       DateTime          @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt       DateTime?         @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist         Boolean           @default(true)
  id              String            @id() @default(cuid())
  name            String
  code            String
  phone_code      String
  /// @DtoApiHidden
  state           State[]
  /// @DtoApiHidden
  BillingAddress  BillingAddress[]
  /// @DtoApiHidden
  ShippingAddress ShippingAddress[]
  /// @DtoApiHidden
  Company         Company[]
}

/// @@deny('read', isExist == false)
model State {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt       DateTime          @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt       DateTime?         @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist         Boolean           @default(true)
  id              String            @id() @default(cuid())
  name            String
  /// @DtoRelationIncludeId
  country_id      String
  country         Country           @relation(fields: [country_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  BillingAddress  BillingAddress[]
  /// @DtoApiHidden
  ShippingAddress ShippingAddress[]
  /// @DtoApiHidden
  Company         Company[]
}

/// @@deny('read', isExist == false)
model User {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt        DateTime         @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt        DateTime?        @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist          Boolean          @default(true)
  id               String           @id() @default(cuid())
  email            String           @unique()
  name             String?
  phone            String?
  password         String
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  resetToken       String?
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  resetTokenExpiry DateTime?
  /// @DtoRelationIncludeId
  currency_id      String?
  currency         Currencies?      @relation(fields: [currency_id], references: [id], onDelete: SetNull)
  /// @DtoApiHidden
  company          Company[]
  /// @DtoApiHidden
  product          Product[]
  /// @DtoApiHidden
  hsnCode          HSNCode[]
  /// @DtoApiHidden
  tax              Tax[]
  /// @DtoApiHidden
  productUnit      ProductUnit[]
  /// @DtoApiHidden
  customer         Customer[]
  /// @DtoApiHidden
  invoice          Invoice[]
  /// @DtoApiHidden
  paymentDetails   PaymentDetails[]
  /// @DtoApiHidden
  quotation        Quotation[]
}

/// @@deny('read', isExist == false)
model Company {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt  DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt  DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist    Boolean   @default(true)
  id         String    @id() @default(cuid())
  name       String
  address    String?
  phone      String?
  /// @DtoRelationIncludeId
  country_id String?
  country    Country?  @relation(fields: [country_id], references: [id])
  /// @DtoRelationIncludeId
  state_id   String?
  state      State?    @relation(fields: [state_id], references: [id])
  city       String?
  zip        String?
  vat        String?
  logo       String?
  /// @DtoRelationIncludeId
  user_id    String    @unique()
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// @@deny('read', isExist == false)
model HSNCode {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist   Boolean   @default(true)
  id        String    @id() @default(cuid())
  code      String
  tax       Float
  /// @DtoRelationIncludeId
  user_id   String
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  Product   Product[]
}

/// @@deny('read', isExist == false)
model Tax {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt   DateTime    @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt   DateTime?   @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist     Boolean     @default(true)
  id          String      @id() @default(cuid())
  percentage  Float
  description String?
  /// @DtoRelationIncludeId
  user_id     String
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  Product     Product[]
  /// @DtoApiHidden
  Invoice     Invoice[]
  /// @DtoApiHidden
  Quatation   Quotation[]
}

/// @@deny('read', isExist == false)
model ProductUnit {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist   Boolean   @default(true)
  id        String    @id() @default(cuid())
  name      String
  /// @DtoRelationIncludeId
  user_id   String
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  Product   Product[]
}

/// @@deny('read', isExist == false)
model Product {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt   DateTime            @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt   DateTime?           @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist     Boolean             @default(true)
  id          String              @id() @default(cuid())
  name        String
  description String?
  price       Float
  type        ProductType
  /// @DtoRelationIncludeId
  currency_id String
  currency    Currencies          @relation(fields: [currency_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  unit_id     String
  unit        ProductUnit         @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  hsnCode_id  String
  hsnCode     HSNCode             @relation(fields: [hsnCode_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  tax_id      String
  tax         Tax                 @relation(fields: [tax_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  user_id     String
  user        User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  invoice     InvoiceProducts[]
  /// @DtoApiHidden
  Quatation   QuotationProducts[]
}

/// @@deny('read', isExist == false)
model BillingAddress {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt  DateTime   @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt  DateTime?  @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist    Boolean    @default(true)
  id         String     @id() @default(cuid())
  address    String
  city       String
  /// @DtoRelationIncludeId
  state_id   String
  state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  country_id String
  country    Country    @relation(fields: [country_id], references: [id], onDelete: Cascade)
  zip        String
  /// @DtoApiHidden
  customer   Customer[]
}

/// @@deny('read', isExist == false)
model ShippingAddress {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt  DateTime   @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt  DateTime?  @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist    Boolean    @default(true)
  id         String     @id() @default(cuid())
  address    String
  city       String
  /// @DtoRelationIncludeId
  state_id   String
  state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  country_id String
  country    Country    @relation(fields: [country_id], references: [id], onDelete: Cascade)
  zip        String
  /// @DtoApiHidden
  customer   Customer[]
}

/// @@deny('read', isExist == false)
model Currencies {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt  DateTime   @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt  DateTime?  @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist    Boolean    @default(true)
  id         String     @id() @default(cuid())
  name       String
  symbol     String
  code       String
  short_code String
  /// @DtoApiHidden
  currency   Customer[]
  /// @DtoApiHidden
  user       User[]
  /// @DtoApiHidden
  product    Product[]
}

/// @@deny('read', isExist == false)
model Customer {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt          DateTime        @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt          DateTime?       @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist            Boolean         @default(true)
  id                 String          @id() @default(cuid())
  name               String
  display_name       String?
  email              String?
  phone              String?
  website            String?
  option             CustomerOption
  /// @DtoRelationIncludeId
  currencies_id      String
  currencies         Currencies      @relation(fields: [currencies_id], references: [id])
  /// @DtoRelationIncludeId
  billingAddress_id  String
  billingAddress     BillingAddress  @relation(fields: [billingAddress_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  shippingAddress_id String
  shippingAddress    ShippingAddress @relation(fields: [shippingAddress_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  user_id            String
  user               User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  invoice            Invoice[]
  /// @DtoApiHidden
  Quatation          Quotation[]
}

/// @@deny('read', isExist == false)
model PaymentDetails {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt   DateTime    @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt   DateTime?   @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist     Boolean     @default(true)
  id          String      @id() @default(cuid())
  paymentType PaymentType
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  ibanNumber  String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  bicNumber   String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  upiId       String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  ifscCode    String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  account_no  String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  swiftCode   String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  paypalId    String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  stripeId    String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  razorpayId  String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  mollieId    String?
  /// @DtoRelationIncludeId
  user_id     String
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  invoice     Invoice[]
}

/// @@deny('read', isExist == false)
model InvoiceProducts {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt  DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt  DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist    Boolean   @default(true)
  id         String    @id() @default(cuid())
  /// @DtoRelationIncludeId
  invoice_id String
  invoice    Invoice   @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  product_id String
  product    Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  quantity   Float
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  tax        Float?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  hsnCode    Float?
  price      Float
  total      Float
}

/// @@deny('read', isExist == false)
model Invoice {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt          DateTime          @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt          DateTime?         @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist            Boolean           @default(true)
  id                 String            @id() @default(cuid())
  /// @DtoRelationIncludeId
  customer_id        String
  customer           Customer          @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  user_id            String
  user               User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  invoice_number     String
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  reference_number   String?
  date               String
  due_date           String
  is_recurring       Boolean
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  recurring          InvoiceRecurring?
  /// @DtoRelationIncludeId
  paymentId          String
  payment            PaymentDetails    @relation(fields: [paymentId], references: [id], onDelete: SetNull)
  /// @DtoApiHidden
  product            InvoiceProducts[]
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  notes              String?
  sub_total          Float
  /// @DtoRelationIncludeId
  tax_id             String?
  tax                Tax?              @relation(fields: [tax_id], references: [id], onDelete: SetNull)
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  discountPercentage Float?
  total              Float
  paid_status        paidStatus        @default(Unpaid)
}

/// @@deny('read', isExist == false)
model QuotationProducts {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt    DateTime  @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt    DateTime? @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist      Boolean   @default(true)
  id           String    @id() @default(cuid())
  /// @DtoRelationIncludeId
  quotation_id String
  quotation    Quotation @relation(fields: [quotation_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  product_id   String
  product      Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  quantity     Float
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  tax          Float?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  hsnCode      Float?
  price        Float
  total        Float
}

/// @@deny('read', isExist == false)
model Quotation {
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt          DateTime            @default(now())
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt          DateTime?           @updatedAt()
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  isExist            Boolean             @default(true)
  id                 String              @id() @default(cuid())
  /// @DtoRelationIncludeId
  customer_id        String
  customer           Customer            @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  /// @DtoRelationIncludeId
  user_id            String
  user               User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quatation_number   String
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  reference_number   String?
  date               String
  expiry_at          String
  /// @DtoApiHidden
  quotation          QuotationProducts[]
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  notes              String?
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  private_notes      String?
  sub_total          Float
  /// @DtoRelationIncludeId
  tax_id             String?
  tax                Tax?                @relation(fields: [tax_id], references: [id], onDelete: SetNull)
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  discountPercentage Float?
  total              Float
}
